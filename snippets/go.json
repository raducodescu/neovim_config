
{
  "shorthand variable declaration": {
    "prefix": ":",
    "body": "${1} := ${0}",
    "description": "Shorthand variable declaration"
  },
  "anonymous function": {
    "prefix": "anon",
    "body": "${1:fn} := func() {\n\t${0}\n}",
    "description": "Anonymous function"
  },
  "append": {
    "prefix": "ap",
    "body": "append(${1:slice}, ${0:value})",
    "description": "Append to slice"
  },
  "append assign": {
    "prefix": "ap=",
    "body": "${1:slice} = append($1, ${0:value})",
    "description": "Append and assign to slice"
  },
  "break": {
    "prefix": "br",
    "body": "break",
    "description": "Break statement"
  },
  "channel": {
    "prefix": "ch",
    "body": "chan ${0:int}",
    "description": "Channel declaration"
  },
  "case": {
    "prefix": "case",
    "body": "case ${1:value}:\n\t${0}",
    "description": "Case statement"
  },
  "constant": {
    "prefix": "con",
    "body": "const ${1:NAME} ${2:Type} = ${0:0}",
    "description": "Constant declaration"
  },
  "constants": {
    "prefix": "cons",
    "body": "const (\n\t${1:NAME} ${2:Type} = ${3:value}\n\t${0}\n)",
    "description": "Multiple constants declaration"
  },
  "constants with iota": {
    "prefix": "iota",
    "body": "const (\n\t${1:NAME} ${2:Type} = iota\n\t${0}\n)",
    "description": "Constants with iota"
  },
  "continue": {
    "prefix": "cn",
    "body": "continue",
    "description": "Continue statement"
  },
  "default case": {
    "prefix": "default",
    "body": "default:\n\t${0}",
    "description": "Default case statement"
  },
  "defer": {
    "prefix": "df",
    "body": "defer ${1:func}(${2})\n${0}",
    "description": "Defer statement"
  },
  "defer function": {
    "prefix": "def",
    "body": "defer func() {\n\t${0}\n}()",
    "description": "Defer anonymous function"
  },
  "import": {
    "prefix": "import",
    "body": "import (\n\t\"${1:package}\"\n)",
    "description": "Import statement"
  },
  "interface": {
    "prefix": "interface",
    "body": "type ${1:Interface} interface {\n\t${2:/* TODO: add methods */}\n}",
    "description": "Interface declaration"
  },
  "if condition": {
    "prefix": "if",
    "body": "if ${1:condition} {\n\t${0}\n}",
    "description": "If condition"
  },
  "else": {
    "prefix": "else",
    "body": "else {\n\t${0}\n}",
    "description": "Else statement"
  },
  "for loop": {
    "prefix": "for",
    "body": "for ${1} {\n\t${0}\n}",
    "description": "For loop"
  },
  "for integer loop": {
    "prefix": "fori",
    "body": "for ${1:i} := 0; $1 < ${2:N}; $1++ {\n\t${0}\n}",
    "description": "For integer loop"
  },
  "for range loop": {
    "prefix": "forr",
    "body": "for ${2:k}, ${3:v} := range ${1} {\n\t${0}\n}",
    "description": "For range loop"
  },
  "function": {
    "prefix": "func",
    "body": "func ${1:function}(${2}) ${3:error }{\n\t${0}\n}",
    "description": "Function declaration"
  },
  "return": {
    "prefix": "return",
    "body": "return ${0}",
    "description": "Return statement"
  },
  "switch": {
    "prefix": "switch",
    "body": "switch ${1:var} {\ncase ${2:value1}:\n\t${0}\n}",
    "description": "Switch statement"
  },
  "goroutine named function": {
    "prefix": "go",
    "body": "go ${1:funcName}(${0})",
    "description": "Goroutine named function"
  },
  "goroutine anonymous function": {
    "prefix": "gof",
    "body": "go func(${1}) {\n\t${3:/* TODO */}\n}(${2})",
    "description": "Goroutine anonymous function"
  },
  "test function": {
    "prefix": "test",
    "body": "func Test${1:Function}(t *testing.T) {\n\t${0}\n}",
    "description": "Test function"
  },
  "variable declaration": {
    "prefix": "var",
    "body": "var ${1:x} ${2:Type}${3: = ${0:value}}",
    "description": "Variable declaration"
  },
  "variables declaration": {
    "prefix": "vars",
    "body": "var (\n\t${1:x} ${2:Type}${3: = ${0:value}}\n)",
    "description": "Multiple variable declarations"
  }
}
